import { KeyValueCache } from '@graphql-mesh/types';
import { Path } from 'graphql/jsutils/Path';
import { GraphQLResolveInfo } from 'graphql';
export declare type MeshFetch = (url: string, options?: RequestInit, context?: any, info?: GraphQLResolveInfo) => Promise<Response>;
export interface DefaultMeshFetchOptions {
    cache: KeyValueCache;
}
export interface MeshFetchHTTPInformation {
    sourceName: string;
    path: Path;
    request: {
        timestamp: number;
        url: string;
        method: string;
        headers: Record<string, string>;
    };
    response: {
        timestamp: number;
        status: number;
        statusText: string;
        headers: Record<string, string>;
    };
    responseTime: number;
}
export declare const httpDetailsByContext: WeakMap<any, MeshFetchHTTPInformation[]>;
export declare function pushHttpDetails(httpDetails: MeshFetchHTTPInformation, context: any): void;
export declare function useDeduplicateRequestsFetch(nonDuplicateFetch: MeshFetch): MeshFetch;
export declare function useHttpDetailsFetch(nonDetailedFetch: MeshFetch): MeshFetch;
export declare const createDefaultMeshFetch: (cache: KeyValueCache) => MeshFetch;
